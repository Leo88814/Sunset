@{
    ViewBag.Title = "票夾";
}

<style>
    .ticket {
        border: 1px solid #000;
        padding: 15px;
        margin-bottom: 20px;
        background-color: #e7d7bc;
        border-radius: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .ticket img {
            width: 100px;
            cursor: pointer;
            border-radius: 10px;
        }

    .ticket-details {
        flex: 1;
        margin-left: 20px;
    }

        .ticket-details p {
            margin: 5px 0;
        }

    .rating {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .rating-stars {
        display: flex;
        margin-top: 10px;
    }

        .rating-stars span {
            font-size: 24px;
            cursor: pointer;
            color: #ccc;
        }

            .rating-stars span.active {
                color: gold;
            }
</style>

<body>
    <div id="app" class="page-container">
        <div class="container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="Main.html">首頁</a></li>
                    <li class="breadcrumb">會員專區</li>
                    <li class="breadcrumb active">票夾</li>
                </ol>
            </nav>
        </div>

        <div class="container">
            <h2>票夾</h2>
            <div v-for="ticket in tickets" :key="ticket.orderNumber" class="ticket">
                <img :src="ticket.mainPicture" alt="ticket.movieName" v-on:click="viewDetails(ticket.orderNumber)" />
                <div class="ticket-details">
                    <p><strong>電影名稱：</strong> {{ ticket.movieName }}</p>
                    <p><strong>訂單編號：</strong> {{ ticket.orderNumber }}</p>
                    <p><strong>票數：</strong> {{ ticket.totalTicketCount }} 張</p>
                    <p><strong>場次時間：</strong> {{ ticket.showTime }}</p> <!-- 顯示時間 -->
                    <p><strong>場次日期：</strong> {{ ticket.showDate }}</p> <!-- 顯示日期 -->
                    <button 
                        :disabled="isCancellationDisabled(ticket.showDate, ticket.showTime)"
                        v-on:click="cancelOrder(ticket.orderId)">
                        取消訂單
                    </button>
                </div>
            </div>
        </div>
    </div>

    @section scripts{
        <script>const { createApp, ref, onMounted } = Vue;

            const config = {
                setup() {
                    const tickets = ref([]);
                    const memberId = getCookie("memberId"); // 從 Cookies 中獲取 memberId
                    const apiUrl = `/api/MemberApiController/UserHistory`;

                    const fetchOrders = async () => {
                        try {
                            const token = getCookie("bookmovie"); // 確保這裡的 token 是正確的
                            const response = await fetch(apiUrl, {
                                headers: {
                                    'Authorization': `Bearer ${token}` // 使用 Bearer token
                                }
                            });
                            if (!response.ok) {
                                throw new Error(`API request failed with status: ${response.status}`);
                            }
                            const data = await response.json();
                            const now = new Date();
                            tickets.value = data.filter(ticket => {
                                const showDateTime = new Date(`${ticket.showDate}T${ticket.showTime}`);
                                return showDateTime > now;
                            });
                        } catch (error) {
                            console.error("Error fetching orders:", error);
                        }
                    };

                    const isCancellationDisabled = (showDate, showTime) => {
                        const showDateTime = new Date(`${showDate}T${showTime}`);
                        const now = new Date();
                        const timeDifference = showDateTime - now;
                        return timeDifference <= 30 * 60 * 1000; // 30 分鐘
                    };

                    const cancelOrder = async (orderId) => {
                        const memberId = getMemberId();
                        if (!memberId) {
                            console.error("Member ID not found");
                            return;
                        }
                        try {
                            const response = await fetch(`/api/MemberApiController/CancelOrder`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${token}`
                                },
                                body: JSON.stringify({ orderId, memberId })
                            });
                        if (!response.ok) {
                            throw new Error(`API request failed with status: ${response.status}`);
                        }
                        await fetchOrders(); // 重新取訂單以更新狀態
                        } catch (error) {
                            console.error("Error cancelling order:", error);
                        }
                    };

                    const viewDetails = (orderNumber) => {
                        window.location.href = `/Member/OrderDetails/${orderNumber}`;
                    };

                    onMounted(fetchOrders);

                    return {
                        tickets,
                        isCancellationDisabled,
                        cancelOrder,
                        viewDetails
                    };
                },
            };

            const app = createApp(config);
            app.mount("#app");

            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null; // 如果沒有找到，返回 null
            }

            function getMemberId() {
                const memberId = getCookie("memberId"); // 假設 memberId 存於名為 "memberId" 的 Cookie 中
                if (!memberId) {
                    console.error("Member ID not found in cookies");
                }
                return memberId;
            }
        </script>
    }
</body>