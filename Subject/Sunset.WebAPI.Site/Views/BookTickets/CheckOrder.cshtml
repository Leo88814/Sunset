
@{
    ViewBag.Title = "線上訂票-確認訂單";
}

<head>
    <title>線上訂票-確認訂單</title>
    <link rel="stylesheet" href="~/CSS/styles.css" />
</head>
<body>
    <div id="app" class="page-container">
        
        <section class="login-section container">
            <nav style="--bs-breadcrumb-divider: '>'" aria-label="breadcrumb">
                <ol class="breadcrumb ms-3">
                    <li class="breadcrumb-item"><a href="@Url.Action("index", "Home")">首頁</a></li>
                    <li class="breadcrumb">線上訂票</li>
                    <li class="breadcrumb"><a href="@Url.Action("ChoiceMovies", "BookTickets")">選擇電影</a></li>
                </ol>
            </nav>

            <h2 class="text">線上訂票步驟</h2>
            <div class="step-bar">
                <div class="step-item">1.選擇電影</div>
                <div class="step-item">2.場次選擇</div>
                <div class="step-item fw-bolder">3.確認訂單</div>
                <div class="step-item">4.訂單完成</div>
            </div>

            <div class="container mt-3">
                <div class="row">
                    <div class="col-md-3 col-sm-6">
                        <img class="img-fluid mt-4" :src="`/images/${orderDetail.mainPicture}`"/>
                        <p class="text-center fw-bolder mt-2">
                            {{ orderDetail.movieName }}
                        </p>
                        <p v-if="false"> {{ orderDetail.id }}</p>
                    </div>

                    <div class="col-md-9 col-sm-6">
                        <section class="order-confirmation">
                            <table class="table table-bordered mt-4">
                                <thead>
                                    <tr>
                                        <th scope="col">電影名稱</th>
                                        <th scope="col">日期</th>
                                        <th scope="col">時間</th>
                                        <th scope="col">影廳</th>
                                        <th scope="col">座位</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>{{ orderDetail.movieName }}</td>
                                        <td>{{ orderDetail.showtimeDateString }}</td>
                                        <td>{{ orderDetail.startTimeMin}}</td>
                                        <td>{{ orderDetail.auditoriumName }}</td>
                                        <td>
                                            <span v-for="(seat, index) in seatInfo" :key="index">
                                                {{ seat.seatNumber }}
                                                <span v-if="index < seatInfo.length - 1">, </span>
                                            </span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>

                            <table class="table table-bordered mt-4">
                                <thead>
                                    <tr>
                                        <th>票種</th>
                                        <th>單價</th>
                                        <th>數量</th>
                                        <th>小計</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="(ticket, index) in selectedTickets" :key="index">
                                        <td>{{ ticket.name }}</td>
                                        <td>{{ ticket.price }}</td>
                                        <td>{{ ticket.quantity }}</td>
                                        <!-- 計算小計 -->
                                        <td>{{ ticket.price * ticket.quantity }}</td>
                                    </tr>
                                </tbody>
                            </table>

                            <!-- 錢包資訊表格 -->
                            <table class="table table-bordered mt-4">
                                <thead>
                                    <tr>
                                        <th>儲值金</th>
                                        <th>電影票總金額</th>
                                        <th>付款後錢包餘額</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>NT$ {{storedBalance.currentBalance}}</td>
                                        <td>NT$ {{totalTicketPrice}}</td>
                                        <td>NT$ {{remainingBalance}}</td>
                                    </tr>
                                </tbody>
                            </table>
                            <div v-if="isBalanceInsufficient"
                                 class="alert alert-danger mt-3">
                                儲值金額不足，無法支付電影票總金額！
                            </div>
                        </section>
                    </div>
                </div>
            </div>

            <div class="text-end mt-3">
                <button v-on:click="goToPreviousPage" class="btn btn-outline-danger">
                    上一頁
                </button>
                <button v-on:click="goToNextPage" class="btn btn-outline-primary ms-2">
                    確認訂單
                </button>
            </div>
        </section>

    </div>
    @section scripts{
        <script>
            const { createApp, ref, onMounted, computed } = Vue;

            const config = {
                setup() {
                    onMounted(async () => {
                        const movieId = await getOrder();
                        getCurrentBalance();
                        forData.DataForMovieRating.MovieInfoId = movieId;

                    });

                    const choiceMovieId = ref(null);
                    const selectedTickets = JSON.parse(
                        localStorage.getItem("selectedTickets")
                    );
                    const ticketIds = selectedTickets
                        .map((ticket) => ticket.id)
                        .join(", ");
                    const ticketNames = selectedTickets
                        .map((ticket) => ticket.name)
                        .join(", ");
                    const ticketPrices = selectedTickets
                        .map((ticket) => ticket.price)
                        .join(", ");
                    const ticketQuantities = selectedTickets
                        .map((ticket) => ticket.quantity)
                        .join(", ");

                    const totalTicketCount = computed(() => {
                        return selectedTickets.reduce((total, ticket) => total + ticket.quantity, 0);
                    });

                    const orderDetail = ref([]);
                    const seatInfo = ref([]);
                    const selectedMovie = ref(null);
                    const selectedDate = ref(null);
                    const selectedTime = ref(null);
                    const movieScheduleId = @Html.Raw(ViewBag.movieScheduleId);
                    const seatIds = @Html.Raw(Json.Encode(ViewBag.seatsId));
                    const storedBalance = ref([]);
                    

                    // 首先，提取 TicketId
                    const choicedticketIds = selectedTickets.map(ticket => ticket.id);

                    // 將 seatIds 字符串轉換為數組
                    const seatIdArray = seatIds.split(',').map(Number);


                    //分別取得各票種的總票價
                    const ticketTotalPrice =
                        parseInt(ticketPrices) * parseInt(ticketQuantities);

                    //取得總票價
                    const totalTicketPrice = computed(() => {
                        return selectedTickets.reduce(
                            (total, ticket) => total + ticket.price * ticket.quantity,
                            0
                        );
                    });

                    //取得購票後餘額
                    const remainingBalance = computed(() => {
                        return storedBalance.value.currentBalance - totalTicketPrice.value;
                    });

                    // 檢查儲值金是否不足
                    const isBalanceInsufficient = computed(() => {
                        return remainingBalance.value < 0;
                    });

                    const getOrder = async (data) => {
                        const token = getCookie("bookmovie");
                        if (!token) {
                            alert('Token not found. Please log in again.');
                            return;
                        }
                        try {
                            const response = await fetch(`/api/CheckOrderApi/CheckOrder/${movieScheduleId}/${seatIds}`, {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            const data = await response.json();
                            
                            orderDetail.value = data.movieScheduleInfo;
                            seatInfo.value = data.choiceSeatInfo;
                            choiceMovieId.value = data.movieScheduleInfo.id;
                            return choiceMovieId.value
                        } catch (error) {
                            console.error("Error:", error);
                        }
                    };
 
                    const getCurrentBalance = async () => {

                        try {
                            const token = getCookie("bookmovie");
                            if (!token) {
                                throw new Error('Token not found');
                            }
                            const response = await fetch(`/api/CheckOrderApi/CheckCurrentBalance`, {
                                headers: {
                                    'Authorization': `Bearer ${token}`
                                }
                            });

                            if (!response.ok) {
                                throw new Error(`API request failed with status: ${response.status}`);
                            }

                            const data = await response.json();
                            storedBalance.value = data;


                        } catch (error) {
                            console.error('Error fetching topup history:', error);
                        }
                    }

                    const confirmOrder = () => {
                        alert("訂單已確認！");
                    };
   
                    const goToPreviousPage = () => {
                        window.location.href = "Booking-ChoiceSeats.html";
                    };
          

                    const forData = {
                        DataForOrder: {
                            MovieReleaseScheduleId: movieScheduleId,
                            TotalTicketCount: totalTicketCount.value,
                            TotalAmount: totalTicketPrice.value,
                        },
                        DataForOrderDetail: seatIdArray.map((seatId, index) => ({
                            TicketId: choicedticketIds[index % choicedticketIds.length],
                            SeatId: seatId
                        })),
                        DataForMovieRating: {
                            MovieInfoId: choiceMovieId.value,
                            rating: null,
                        }
                    }
                    
                    const goToNextPage = async () => {
                        try {
                            const token = getCookie("bookmovie");
                            if (!token) {
                                alert('Token not found. Please log in again.');
                                return;
                            }

                            const response = await fetch('/api/CheckOrderApi/PostOrder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Authorization': `Bearer ${token}`
                                },
                                body: JSON.stringify(forData)
                            });

                            if (!response.ok) {
                                throw new Error('訂單創建失敗');
                            }
                            const result = await response.json();
                            console.log('訂票成功:', result);

                            // 訂票成功後跳轉
                            window.location.href = "@Url.Action("OrderComplete", "BookTickets")";
                        } catch (error) {
                            console.error('Error during order creation:', error);
                            alert('訂票失敗，請稍後再試');
                        }

                        try {
                            const token = getCookie("bookmovie");
                            if (!token) {
                                alert('Token not found. Please log in again.');
                                return;
                            }


                        } catch { }
                    };

                    return {
                        selectedMovie,
                        goToPreviousPage,
                        goToNextPage,

                        choiceMovieId,
                        confirmOrder,
                        selectedDate,
                        selectedTime,
                        selectedTickets,

                        ticketNames,
                        ticketPrices,
                        ticketQuantities,
                        ticketTotalPrice,
                        totalTicketPrice,
                        remainingBalance,
                        isBalanceInsufficient,
                        storedBalance,
                        orderDetail,
                        seatInfo,

                        getCurrentBalance,
                        getOrder,

                        choicedticketIds,
                        seatIdArray,
                
                    };
                },
            };

            const app = createApp(config);
            app.mount("#app");

            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            }
        </script>
    }
</body>

