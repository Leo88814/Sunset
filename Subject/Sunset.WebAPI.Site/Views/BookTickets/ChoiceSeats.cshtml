@{
    ViewBag.Title = "線上訂票-選擇座位";
}
<head>
    <title>線上訂票-選擇座位</title>
    <link rel="stylesheet" href="~/CSS/styles.css" />
    <style>
        #seats {
            display: grid;
            grid-template-columns: repeat(12, 1fr);
            gap: 10px;
        }

        .seat {
            height: 40px;
            background-color: lightgray;
            font-size: 0.8em
        }

        .selected {
            background-color: green !important;
        }

        .unavailable {
            background-color: red;
            cursor: not-allowed;
        }

            .unavailable:hover {
                background-color: red;
                cursor: not-allowed;
            }

        #choiceseats {
            max-width: 95%;
        }
    </style>
</head>
<body>
    <div id="app" class="page-container">

        <section class="login-section container">
            <nav style="--bs-breadcrumb-divider: '>'" aria-label="breadcrumb">
                <ol class="breadcrumb ms-3">
                    <li class="breadcrumb-item"><a href="@Url.Action("index", "Home")">首頁</a></li>
                    <li class="breadcrumb">線上訂票</li>
                    <li class="breadcrumb"><a href="@Url.Action("ChoiceMovies", "BookTickets")">選擇電影</a></li>
                </ol>
            </nav>

            <h2 class="text">線上訂票步驟</h2>
            <div class="step-bar">
                <div class="step-item">1.選擇電影</div>
                <div class="step-item fw-bolder">2.場次選擇</div>
                <div class="step-item">3.確認訂單</div>
                <div class="step-item">4.訂單完成</div>
            </div>

            <div class="container mt-3">
                <div class="row">
                    <!--選擇票種-->
                    <div class="col-md-9 col-sm-6">
                        <h5 class="fw-bolder">選擇票種</h5>
                        <div class="row">
                            <div class="col-4"
                                 v-for="(ticket, index) in ticketTypes"
                                 :key="ticket.id">
                                {{ ticket.ticketType }} {{ ticket.ticketPriceAsInt }}元
                                <select v-model="ticket.selected"
                                        class="form-select"
                                       v-on:change="validateSelection">
                                    <option v-for="n in availableOptions(ticket)"
                                            :key="n"
                                            :value="n">
                                        {{ n }}
                                    </option>
                                </select>
                            </div>
                        </div>
                        <!-- 顯示票種錯誤訊息 -->
                        <div class="text-danger" v-if="ticketError">
                            {{ ticketError }}
                        </div>
                    </div>

                    <div class="col-md-3 col-sm-6">
                        帳號限購最多三張票
                        <div class="mt-2">優待票：學生證、軍警相關證明文件。</div>
                        <div class="mt-2">
                            愛心票：未滿5歲、年滿65歲以上，身心障礙人士需出示身心障礙證件入場需出示證件。
                        </div>
                    </div>

                </div>
            </div>

            <div class="col-12 text-center">
                <img src="~/images/Seat.jpg" class="mt-3" id="choiceseats" />
            </div>

            <div class="container mt-3">
                <div class="row">
                    <h5 class="fw-bolder">選擇座位</h5>

                    <div id="seats">
                        <button class="seat btn text-center align-content-center "
                                v-for="s in seats"
                                :key="s.id"
                                :disable="s.seatStatus"
                                :class="{ selected: s.selected&&s.seatStatus, unavailable: s.unavailable ,unavailable:!s.seatStatus}"
                                v-on:click="handleSeatClick(s)">
                            {{ s.seatNumber }}
                        </button>
                    </div>
                    <!-- 座位選擇錯誤訊息 -->
                    <div class="text-danger" v-if="seatError">{{ seatError }}</div>
                </div>
            </div>

            <div class="text-end mt-3">
                <button v-on:click="goToNextPage" class="btn btn-primary ms-2">
                    下一頁
                </button>
            </div>
        </section>
    </div>

    @section scripts{
        <script>
        const { createApp, ref, onMounted, computed } = Vue;

            const config = {
                setup() {
                    const seats = ref([]);
                    const movieScheduleId = ref();
                    const choiceSeats = ref([]);
                    const movieId = @Html.Raw(ViewBag.movieId);
                    const showdateId = @Html.Raw(ViewBag.showdateId);
                    const showtimeId = @Html.Raw(ViewBag.showtimeId);
                    const maxTickets = ref(3);
                    const maxTotalTickets = ref(3);
                    const seatError = ref("");
                    const ticketError = ref("");
                    const selectedTicketInfo = ref("");
                    const ticketTypes = ref([]);
                    const selectedTickets = ref({}); 

                    const GetTicketsInfo = async () => {
                        try {
                            const response = await fetch(`/api/GetTicketsInfoApi/`, {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            const data = await response.json();
                            ticketTypes.value = data.map(ticket => ({
                                ...ticket,
                                selected: 0
                            }));

                        } catch (error) {
                            console.error("Error:", error);
                        }
                    };

                    const choiceSeatInfo = async () => {
                        try {
                            const response = await fetch(`/api/GetSeatsApi/ChoiceSeats/${movieId}/${showdateId}/${showtimeId}`, {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            const data = await response.json();
                            seats.value = data;

                        } catch (error) {
                            console.error("Error:", error);
                        }
                    };

                    const getMovieScheduleInfo = async () => {
                        try {
                            const response = await fetch(`/api/CheckOrderApi/GetMovieScheduleId/${movieId}/${showdateId}/${showtimeId}`, {
                                method: 'GET',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            const data2 = await response.json();
                            movieScheduleId.value = data2.id;

                        } catch (error) {
                            console.error("Error:", error);
                        }
                    };

                    onMounted(() => {
                        getMovieScheduleInfo();
                        GetTicketsInfo();
                        choiceSeatInfo();
                       
                       
                    })

                        //計算總票數
                        const totalTickets = computed(() => {
                            return ticketTypes.value.reduce(
                                (total, ticket) => total + ticket.selected,
                                0
                            );
                        });
                 
                        //判斷是否超過所選的總票數
                        const validateSelection = () => {
                            if (totalTickets.value > maxTotalTickets.value) {
                                ticketError.value = `最多只能選擇 ${maxTotalTickets.value} 張票`;
                                return false;
                            }
                            ticketError.value = "";
                            return true;
                        };

                        //計算可選票種的票數
                        const availableOptions = (ticket) => {
                            const remainingTickets = maxTotalTickets.value - totalTickets.value;
                            const currentSelected = ticket.selected;
                            return Array.from(
                                {
                                    length:
                                        Math.min(
                                            remainingTickets + currentSelected,
                                            maxTickets.value
                                        ) + 1,
                                },
                                (_, i) => i
                            );
                        };

                        const selectedSeats = computed(() => {
                            return seats.value.filter((seat) => seat.selected).length;
                        });

                        const toggleSeatSelection = (seat) => {
                            if (seat.unavailable || (selectedSeats.value >= totalTickets.value && !seat.selected)) {
                                seatError.value = "選擇的座位不能超過總票數";
                                return false;
                            }
                            seat.selected = !seat.selected;
                            seatError.value = "";
                            return seat.selected;
                        };

                        const handleSeatClick = (seat) => {
                            if (seat.seatStatus) {
                                toggleSeatSelection(seat);
                                if (seat.seatId !== undefined && seat.seatId !== null) {
                                    addChoiceSeat(seat.seatId);
                                }
                                else {
                                    removeChoiceSeat(seat.seatId);
                                }
                            }
                        };

                        const addChoiceSeat = (seatId) => {
                            const index = choiceSeats.value.indexOf(seatId);

                            if (index === -1) {
                               
                                    choiceSeats.value.push(seatId);
                                
                            } else {
                                // 如果 seatId 已經存在於陣列中，則移除
                                choiceSeats.value.splice(index, 1);
                            }
                        };

                        const removeChoiceSeat = (seatId) => {
                            choiceSeats.value = choiceSeats.value.filter(id => id !== seatId);
                            choiceSeats.value.pop(seatId);
                        };

                        const goToNextPage = () => {
                            if (selectedSeats.value !== totalTickets.value) {
                                seatError.value = `您需要選擇 ${totalTickets.value} 個座位`;
                            }
                            else {
                                seatError.value = "";
                                const selectedTicketInfo = ticketTypes.value
                                    .filter((ticket) => ticket.selected > 0)
                                    .map((ticket) => ({
                                        id: ticket.id,
                                        name: ticket.ticketType,
                                        price: ticket.ticketPriceAsInt,
                                        quantity: ticket.selected,
                                    }));
                                localStorage.setItem(
                                    "selectedTickets",
                                    JSON.stringify(selectedTicketInfo)
                                );
                       
                                // 構建URL，使用重複的查詢參數來傳遞多個整數
                                const seatsString = Object.values(choiceSeats.value).join(',');
                                const url = `@Url.Action("CheckOrder", "BookTickets")/${movieScheduleId.value}/${choiceSeats.value}`;
                                // 導航到新頁面
                                window.location.href = url;
                            }
                        };
         
                    return {
                        maxTickets,
                        maxTotalTickets,
                        ticketTypes,
                        totalTickets,
                        availableOptions,
                        ticketError,
                        goToNextPage,
                        toggleSeatSelection,
                        selectedSeats,
                        seats,
                        validateSelection,
                        seatError,
                        choiceSeatInfo,
                        getMovieScheduleInfo,
                        movieScheduleId,
                        movieId,
                        handleSeatClick,
                        addChoiceSeat,
                        removeChoiceSeat
                    };


                }
            }
        const app = createApp(config);
        app.mount("#app");

        </script>
    }
</body>